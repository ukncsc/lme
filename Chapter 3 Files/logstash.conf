##########################
# LME Logstash Config    #
# Version 0.5.1 - 16/11/22 #
##########################

input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/run/secrets/logstash.crt"
    ssl_key => "/run/secrets/logstash.key"
    ssl_certificate_authorities => ["/run/secrets/ca.crt"]
    ssl_verify_mode => "force_peer"
    tags => "beats"
  }
}

filter {
  clone {
    clones => ['cloned_logs']
    add_tag => ["cloned_logs"]
  }
  if "beats" in [tags] {
    # If a windows update event that contains an updateTitle field (these sometimes contain KB numbers) then extract the KB
    if [updateTitle][winlog][event_data] {
      grok {
        match => {
          "[winlog][event_data][updateTitle]" => "(?<KB_number>KB[0-9]{5,})"
        }
      }
    }
  }
}

output {
  if "cloned_logs" not in [tags] {
    if "beats" in [tags] {
      if [@metadata][beat] == "winlogbeat" {
        elasticsearch {
          hosts => "https://elasticsearch:9200"
          index => "%{[@metadata][beat]}-alias"
          user => logstash_writer
          password => "insertlogstashwriterpasswordhere"
          ssl => true
          cacert => '/run/secrets/ca.crt'
          pipeline => "%{[@metadata][beat]}"
        }
      }
      else {
        if [@metadata][pipeline] { 
          elasticsearch {
            hosts => "https://elasticsearch:9200"
            index => "%{[@metadata][beat]}-%{[@metadata][version]}"
            user => logstash_writer
            password => "insertlogstashwriterpasswordhere"
            ssl => true
            cacert => '/run/secrets/ca.crt'
            pipeline => "%{[@metadata][pipeline]}"
          }
        }
        else {
          elasticsearch {
            hosts => "https://elasticsearch:9200"
            index => "%{[@metadata][beat]}-%{[@metadata][version]}"
            user => logstash_writer
            password => "insertlogstashwriterpasswordhere"
            ssl => true
            cacert => '/run/secrets/ca.crt'
            pipeline => "%{[@metadata][beat]}"
          }
        }
      }
    }
  }
}
